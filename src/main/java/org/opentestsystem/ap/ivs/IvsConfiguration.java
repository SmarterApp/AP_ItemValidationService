package org.opentestsystem.ap.ivs;

import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.AsyncDataStorePreviewManager;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStorePreviewManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.client.AmazonClient;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemSyncRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusTransitionRepository;
import org.opentestsystem.ap.common.gitlab.GitLabItemManager;
import org.opentestsystem.ap.common.gitlab.GitLabPreviewManager;
import org.opentestsystem.ap.common.itembank.IdGenerator;
import org.opentestsystem.ap.common.preview.PreviewClient;
import org.opentestsystem.ap.common.preview.PreviewManager;
import org.opentestsystem.ap.common.preview.PreviewValidator;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.task.ItemCleanupTask;
import org.opentestsystem.ap.common.task.TaskProperties;
import org.opentestsystem.ap.common.validation.ValidationManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.Executor;

@Configuration
public class IvsConfiguration {

    private final ItemBankProperties itemBankProperties;

    @Value("${item.validation.async.executor.poolSize:5}")
    private int asyncExecutorPoolSize;

    @Autowired
    public IvsConfiguration(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    @Bean
    public ItemCleanupTask itemCleanupTask(TaskProperties taskProperties) {
        return new ItemCleanupTask(taskProperties, this.itemBankProperties);
    }

    // ------------------------------------------------------------------------

    @Bean
    public Executor asyncExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(this.asyncExecutorPoolSize);
        executor.setMaxPoolSize(this.asyncExecutorPoolSize);
        executor.setThreadNamePrefix("Validation-");
        return executor;
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public AmazonClient amazonClient() {
        return new AmazonClient(itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreUtility dataStoreUtility() {
        return new DataStoreUtility();
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreAttachmentManager dataStoreAttachmentManager(AmazonClient amazonClient,
                                                                 DataStoreUtility dataStoreUtility) {
        return new DataStoreAttachmentManager(amazonClient, dataStoreUtility);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreDataManager dataStoreDataManager(ItemEntityRepository itemEntityRepository,
                                                     WorkflowStatusRepository workflowStatusRepository,
                                                     WorkflowStatusTransitionRepository workflowStatusTransitionRepository,
                                                     ItemSyncRepository itemSyncRepository) {
        return new DataStoreDataManager(
            this.itemBankProperties,
            itemEntityRepository,
            workflowStatusRepository,
            workflowStatusTransitionRepository,
            itemSyncRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public GitLabItemManager gitLabManager(ItemRepository itemRepository) {
        return new GitLabItemManager(this.itemBankProperties, itemRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public PreviewValidator previewValidator() {
        return new PreviewValidator();
    }

    @Bean
    @ConditionalOnMissingBean
    public AsyncDataStorePreviewManager asyncDataStorePreviewManager(DataStoreDataManager dataManager,
                                                                     DataStoreAttachmentManager attachmentManager,
                                                                     ItemRepository itemRepository) {
        return new AsyncDataStorePreviewManager(
            this.itemBankProperties,
            dataManager,
            attachmentManager,
            itemRepository
        );
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStorePreviewManager dataStorePreviewManager(DataStoreDataManager dataManager,
                                                           DataStoreAttachmentManager attachmentManager,
                                                           ItemRepository itemRepository,
                                                           AsyncDataStorePreviewManager asyncDataStorePreviewManager) {
        return new DataStorePreviewManager(
            this.itemBankProperties, dataManager, attachmentManager, itemRepository, asyncDataStorePreviewManager);
    }

    @Bean
    @ConditionalOnMissingBean
    public GitLabPreviewManager gitLabPreviewManager(ItemRepository itemRepository, IdGenerator idGenerator) {
        return new GitLabPreviewManager(itemRepository, idGenerator);
    }

    @Bean
    @ConditionalOnMissingBean
    public PreviewClient previewClient() {
        return new PreviewClient(this.itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public PreviewManager previewManager(PreviewValidator validator,
                                         DataStorePreviewManager dataStorePreviewManager,
                                         GitLabPreviewManager gitLabPreviewManager,
                                         PreviewClient previewClient) {
        return new PreviewManager(validator, dataStorePreviewManager, gitLabPreviewManager, previewClient);
    }

    @Bean
    @ConditionalOnMissingBean
    public ValidationManager validationManager(DataStorePreviewManager dataStorePreviewManager) {
        return new ValidationManager(dataStorePreviewManager);
    }
}
