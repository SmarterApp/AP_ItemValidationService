/*
 * Copyright 2017 Regents of the University of California. Licensed under the Educational Community License, Version
 * 2.0 (the "license"); you may not use this file except in compliance with the License. You may obtain a copy of the
 * license at
 *
 * https://opensource.org/licenses/ECL-2.0
 *
 * Unless required under applicable law or agreed to in writing, software distributed under the License is distributed
 * in an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * specific language governing permissions and limitations under the license.
 */
package org.opentestsystem.ap.ivs.service;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

@Slf4j
@Component
public class ValidationUtility {

    private static final String ITEMS_DIR = "Items";

    private static final String STIMULI_DIR = "Stimuli";

    private static final String manifestFile = "imsmanifest.xml";

    private static final String validationRootChildName = "validation";

    private final ItemBankProperties itemBankProperties;

    public ValidationUtility(final ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    public Path initializeValidationStructure(final Path destinationRootPath) {
        final Path validationRootChild = destinationRootPath.resolve(validationRootChildName);

        final Path manifestPath = Paths.get(
            Thread.currentThread().getContextClassLoader().getResource(manifestFile).getPath());

        try {
            FileUtils.copyFile(manifestPath.toFile(), validationRootChild.resolve(manifestFile).toFile());
        } catch (IOException e) {
            throw new SystemException(e);
        }
        return validationRootChild;
    }

    public Path mapItemToValidationStructure(final ItemContext itemContext, final Path validationRootChild) {
        return mapToValidationStructure(itemContext, validationRootChild.resolve(ITEMS_DIR),
            mapItemFolderName(itemContext.getItemId()));
    }

    public Path mapStimulusToValidationStructure(ItemContext stimulusContext, Path validationRootChild) {
        return mapToValidationStructure(stimulusContext, validationRootChild.resolve(STIMULI_DIR),
            mapStimFolderName(stimulusContext.getItemId()));
    }

    public Path mapGlossaryToValidationStructure(final ItemContext itemContext, final Path validationRootChild) {
        final String glossaryId = RepositoryUtil.getGlossaryId(itemContext.getItemId());
        final String baseFolderName = mapItemFolderName(glossaryId);

        final Path itemGlossaryFolderPath = itemContext.getLocalGlossaryFolderPath();

        final Path itemsPath = validationRootChild.resolve(ITEMS_DIR);

        final Path glossaryValidationRepoPath = itemsPath.resolve(baseFolderName);

        final Path glossaryValidationFilePath = glossaryValidationRepoPath.resolve(mapFileName(glossaryId));
        final Path glossaryValidationAdjustedFilePath = glossaryValidationRepoPath.resolve(mapFileName(baseFolderName));

        try {
            FileUtils.copyDirectory(itemGlossaryFolderPath.toFile(), glossaryValidationRepoPath.toFile());
            glossaryValidationFilePath.toFile().renameTo(glossaryValidationAdjustedFilePath.toFile());
        } catch (IOException e) {
            throw new SystemException("Error copying item glossary " + glossaryId + " to the glossary repo", e);
        }

        return glossaryValidationRepoPath;
    }

    // ------------------------------------------------------------------------
    // Helper Methods
    // ------------------------------------------------------------------------

    private Path mapToValidationStructure(final ItemContext itemContext, final Path itemValidationParent, final String baseFolderName) {
        final String itemId = itemContext.getItemId();

        final Path itemValidationRepoPath = itemValidationParent.resolve(baseFolderName);

        final Path itemValidationFilePath = itemValidationRepoPath.resolve(mapFileName(itemId));
        final Path itemValidationAdjustedFilePath = itemValidationRepoPath.resolve(mapFileName(baseFolderName));

        try {
            FileUtils.copyDirectory(itemContext.getLocalRepositoryPath().toFile(), itemValidationRepoPath.toFile());
            itemValidationFilePath.toFile().renameTo(itemValidationAdjustedFilePath.toFile());
        } catch (IOException e) {
            throw new SystemException("Error copying item " + itemId + " for validation", e);
        }
        return itemValidationRepoPath;
    }

    private String mapItemFolderName(final String itemId) {
        return String.format("item-%s-%s", this.itemBankProperties.getBankKey(), itemId);
    }

    private String mapStimFolderName(final String itemId) {
        return String.format("stim-%s-%s", this.itemBankProperties.getBankKey(), itemId);
    }

    private String mapFileName(final String baseName) {
        return String.format("%s.xml", baseName);
    }
}
