package org.opentestsystem.ap.ivs.service;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.logging.Logger;

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
import com.google.common.collect.Lists;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.opentestsystem.ap.common.model.ValidationError;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.ivs.client.CptApi;
import org.opentestsystem.ap.ivs.config.IvsProperties;
import org.opentestsystem.ap.ivs.models.PushValidation;
import org.springframework.stereotype.Component;

/**
 * Pulls validation requests from the message broker.
 */
@Slf4j
@Component
public class ValidationConsumerService {

    private static String ITEM_ID_REQUIRED = "Item ID is required";

    private final ItemRepository itemRepository;

    private final ItemBankProperties itemBankProperties;

    private final IvsProperties ivsProperties;

    private final ItemBankSystemUser itemBankUser;

    public ValidationConsumerService(final ItemRepository itemRepository,
                                     final ItemBankProperties itemBankProperties,
                                     final IvsProperties ivsProperties) {
        this.itemRepository = itemRepository;
        this.itemBankProperties = itemBankProperties;
        this.ivsProperties = ivsProperties;
        this.itemBankUser = new ItemBankSystemUser(
            ivsProperties.getSystemUserName(), ivsProperties.getSystemFullName());
    }

    /**
     * Validates the item and saves the results.
     *
     * @param request The validation request for a item push event.
     */
    public void validateItemPush(final PushValidation request) {
        final String itemId = request.getItemId();
        final String branchName = request.getBranchName();
        log.debug("Validating item {} for branch ", itemId, branchName);

        final Path path = itemRepository.cloneBranch(itemBankUser, itemId, branchName);
        try {
            log.debug("Item {} cloned to {}", itemId, path.toString());

            runValidation(itemId, path);

            final String commitMessage = ivsProperties.getValidationCommitMessage() + request.getCommitId();

            itemRepository.saveValidationResults(itemBankUser, itemId, path, commitMessage);
        } finally {
            deleteRepository(path);
        }
    }

    public void runValidation(String itemId, Path path) {
        String command = " /Users/gregwhite/Projects/SmarterBalanced/ContentPackageTabulator/ContentPackageTabulator/bin/Release/netcoreapp2.0/osx.10.12-x64/publish/ContentPackageTabulator -j " + path.toString();
        //String command = "/cpt/ContentPackageTabulator  -j " + path.toString();
        try {
            Process process = Runtime.getRuntime().exec(command);
            BufferedReader stdInput = new BufferedReader(new
                    InputStreamReader(process.getInputStream()));

            String s;
            while ((s = stdInput.readLine()) != null) {
                log.debug("CPT: {}", s);
            }

            log.debug("CPT validation complete for {} in path {}", itemId, path);
        } catch(Exception ex) {
            log.debug("Unable to execute cpt against {} in path {}", itemId, path);
        }
    }

    // ------------------------------------------------------------------------

    private void deleteRepository(final Path path) {
        if (path != null) {
            try {
                FileUtils.deleteDirectory(path.getParent().toFile());
            } catch (IOException e) {
                log.warn("Error deleting local repository {}", path.toString(), e);
            }
        }
    }

    private CptApi connectToCptApi() {
        return CptApi.connect(ivsProperties.getCptHostName(), ivsProperties.getCptApiVersion());
    }

    // ------------------------------------------------------------------------

    /**
     * Generate name of error report csv file based on item information
     *
     * @param item
     */
    private String getErrorFileName(Item item) {
        String filename = item.getType().equals("stim") ?
            "stim" : "item";
        filename = filename + "-";
        filename = filename + itemBankProperties.getBankKey();
        filename = filename + "-";
        filename = filename + item.getId();
        return filename + "_ErrorReport.csv";
    }

    /**
     * Reads the csv error report and maps it to a ValidationError list
     *
     * @param file   the csv file to be parsed
     * @param itemId the ID of the item the csv is associated to
     */
    private List<ValidationError> unpackCsv(File file, String itemId) throws IOException {
        log.debug("unpacking csv validation error report for item {} with name {}", itemId, file.getName());
        MappingIterator<ValidationError> mappingIterator = new CsvMapper()
            .readerFor(ValidationError.class)
            .with(CsvSchema.emptySchema().withUseHeader(true))
            .readValues(file);
        return mappingIterator.readAll();
    }
}
