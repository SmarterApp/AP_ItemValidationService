package org.opentestsystem.ap.ivs.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Path;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.ivs.config.IvsProperties;
import org.opentestsystem.ap.ivs.models.PushValidation;
import org.springframework.stereotype.Component;

/**
 * Pulls validation requests from the message broker.
 */
@Slf4j
@Component
public class ValidationConsumerService {

    private final ItemRepository itemRepository;

    private final IvsProperties ivsProperties;

    private final ItemBankSystemUser itemBankUser;

    public ValidationConsumerService(final ItemRepository itemRepository,
                                     final IvsProperties ivsProperties) {
        this.itemRepository = itemRepository;
        this.ivsProperties = ivsProperties;
        this.itemBankUser = new ItemBankSystemUser(
            ivsProperties.getSystemUserName(), ivsProperties.getSystemFullName());
    }

    /**
     * Validates the item and saves the results.
     *
     * @param request The validation request for a item push event.
     */
    public void validateItemPush(final PushValidation request) {
        final String itemId = request.getItemId();
        final String branchName = request.getBranchName();
        log.debug("Validating item {} for branch ", itemId, branchName);

        final Path localRepositoryPath = itemRepository.cloneBranch(itemBankUser, itemId, branchName);
        try {
            log.debug("Item {} cloned to {}", itemId, localRepositoryPath.toString());

            runValidation(itemId, localRepositoryPath);

            final String commitMessage = ivsProperties.getValidationCommitMessage() + request.getCommitId();

            itemRepository.saveValidationResults(itemBankUser, itemId, branchName, localRepositoryPath, commitMessage);
        } finally {
            deleteRepository(localRepositoryPath);
        }
    }

    /**
     * Shells out and runs the Content Package Tabulator in Error-Only mode to produce a validation.json file for the
     * indicated item.
     *
     * @param itemId The ID of the item to be validated
     * @param path   The path to the folder containing the item
     */
    public void runValidation(String itemId, Path path) {
        log.debug("Starting CPT validation for {} in path {}", itemId, path);
        String command = ivsProperties.getCptExecutablePath() + " -j " + path.toString();
        try {
            Process process = Runtime.getRuntime().exec(command);
            BufferedReader stdInput = new BufferedReader(new
                InputStreamReader(process.getInputStream()));

            String s;
            while ((s = stdInput.readLine()) != null) {
                log.debug("CPT: {}", s);
            }

            log.debug("CPT validation complete for {} in path {}", itemId, path);
        } catch (Exception ex) {
            log.debug("Unable to execute cpt against {} in path {}", itemId, path);
        }
    }

    // ------------------------------------------------------------------------

    private void deleteRepository(final Path path) {
        if (path != null) {
            try {
                FileUtils.deleteDirectory(path.getParent().toFile());
            } catch (IOException e) {
                log.warn("Error deleting local repository {}", path.toString(), e);
            }
        }
    }
}
