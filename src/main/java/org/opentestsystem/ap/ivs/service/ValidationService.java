package org.opentestsystem.ap.ivs.service;

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.common.util.ValidationException;
import org.opentestsystem.ap.ivs.config.AmqpConfig;
import org.opentestsystem.ap.ivs.models.GitLabAction;
import org.opentestsystem.ap.ivs.models.GitLabActionDto;
import org.opentestsystem.ap.ivs.models.ValidationError;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.FileVisitOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

/**
 * Created by gregwhite on 8/15/17.
 */
@Slf4j
@Component
public class ValidationService {

    private static String ITEM_ID_REQUIRED = "Item ID is required";

    @Autowired
    public ValidationService(final RabbitTemplate rabbitTemplate,
                             final AmqpConfig amqpConfig,
                             final ItemRepository itemRepository,
                             final SecurityUtil securityUtil,
                             final ItemBankProperties itemBankProperties) {
        this.rabbitTemplate = rabbitTemplate;
        this.amqpConfig = amqpConfig;
        this.itemRepository = itemRepository;
        this.securityUtil = securityUtil;
        this.itemBankProperties = itemBankProperties;
    }

    private final RabbitTemplate rabbitTemplate;
    private final AmqpConfig amqpConfig;
    private final ItemRepository itemRepository;
    private final SecurityUtil securityUtil;
    private final ItemBankProperties itemBankProperties;

    /**
     * Pass item to AMQP client RabbitMq queue for validation
     *
     * @param action The GitLab-derived item information necessary to prepare the item for validation
     */
    public void validate(GitLabAction action) {
        log.debug("validation request enqueued for item {} commit {}", action.getProject().getName(), action.getCheckout_sha());
        rabbitTemplate.convertAndSend(amqpConfig.getIvsProperties().getValidationQueue(), new GitLabActionDto(action));
    }

    /**
     * Retrieve validation messages xml document from the item repository, parse the csv document, return
     * list of validation errors to the caller. Returns an empty list if file not found.
     *
     * @param itemId The id of the item to load validation messages for
     */
    public List<ValidationError> getValidationMessages(String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        log.debug("retrieving validation messages for {}", itemId);
        Item item = itemRepository.findItem(securityUtil.getItemBankUser(), itemId);
        Path path = itemRepository.cloneItem(securityUtil.getItemBankUser(), itemId);
        Optional<File> errorFile;
        try {
             errorFile = Files.walk(path, FileVisitOption.FOLLOW_LINKS)
                    .map(Path::toFile)
                    .filter(x -> x.getName().equals(getErrorFileName(item)))
                    .findFirst();
            return errorFile.isPresent() ? unpackCsv(errorFile.get(), itemId) : Collections.emptyList();
        } catch(Exception ex) {
            throw new RuntimeException("Error searching for validation messages", ex);
        }
    }

    /**
     * Generate name of error report csv file based on item information
     *
     * @param item
     */
    private String getErrorFileName(Item item) {
        String filename = item.getType().equals("stim") ?
                "stim" : "item";
        filename = filename + "-";
        filename = filename + itemBankProperties.getBankKey();
        filename = filename + "-";
        filename = filename + item.getId();
        return filename + "_ErrorReport.csv";
    }

    /**
     * Reads the csv error report and maps it to a ValidationError list
     *
     * @param file the csv file to be parsed
     * @param itemId the ID of the item the csv is associated to
     */
    private List<ValidationError> unpackCsv(File file, String itemId) throws IOException {
        log.debug("unpacking csv validation error report for item {} with name {}", itemId, file.getName());
        CsvMapper mapper = new CsvMapper();
        CsvSchema schema = CsvSchema.builder()
                .addColumn("File")
                .addColumn("ItemId")
                .addColumn("ItemType")
                .addColumn("Category")
                .addColumn("Severity")
                .addColumn("ErrorMessage")
                .addColumn("Detail")
                .build()
                .withHeader();
        MappingIterator<ValidationError> mappingIterator = mapper.readerFor(ValidationError.class).with(schema).readValues(file);
        return mappingIterator.readAll();
    }
}
