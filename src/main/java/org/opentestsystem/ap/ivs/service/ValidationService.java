package org.opentestsystem.ap.ivs.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Path;
import java.nio.file.Paths;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.ValidationResults;
import org.opentestsystem.ap.common.repository.ItemCrudRequest;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.SaaifIdDigitGenerator;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.ivs.config.IvsProperties;
import org.springframework.stereotype.Component;

import static org.apache.commons.collections4.ListUtils.emptyIfNull;

/**
 * Pulls validation requests from the message broker.
 */
@Slf4j
@Component
public class ValidationService {

    public static final SaaifIdDigitGenerator ID_DIGIT_GENERATOR = new SaaifIdDigitGenerator(1000000, Integer.MAX_VALUE);

    private final ItemRepository itemRepository;

    private final IvsProperties ivsProperties;

    private final SecurityUtil securityUtil;

    private final ValidationUtility validationUtility;

    private final ItemBankProperties itemBankProperties;

    private final Path localBaseDir;

    public ValidationService(final ItemRepository itemRepository,
                             final IvsProperties ivsProperties,
                             final SecurityUtil securityUtil,
                             final ValidationUtility validationUtility,
                             final ItemBankProperties itemBankProperties) {
        this.itemRepository = itemRepository;
        this.ivsProperties = ivsProperties;
        this.securityUtil = securityUtil;
        this.validationUtility = validationUtility;
        this.itemBankProperties = itemBankProperties;
        this.localBaseDir = Paths.get(itemBankProperties.getLocalBaseDir());
    }

    // ------------------------------------------------------------------------

    /**
     * Validates an item.
     *
     * @param itemId The item to validate.
     */
    public ValidationResults validateItem(final String itemId) {
        log.debug("validateItem: item {}", itemId);

        final ValidationResults result = new ValidationResults();

        GitClient gitClient = null;

        try {
            Path pathToItem = clone(itemId);
            runValidation(itemId, pathToItem);

            result.setValidationResults(emptyIfNull(gitClient.readValidationFile()));
        } finally {
            close(gitClient);
        }

        return result;
    }

    // ------------------------------------------------------------------------

    private Path clone(final String itemId) {
        final ItemContext itemContext = cloneItem(itemId);
        final ItemContext stimulusContext = cloneItemStimulus(itemContext);
        return mapClonesToValidationStructure(itemContext, stimulusContext);
    }

    /**
     * Clone a specific item branch to the local file system .
     *
     * @param itemId The unique item identifier.
     * @return The context of the cloned item.
     */
    private ItemContext cloneItem(final String itemId) {
        log.debug("cloneItem: item {}", itemId);

        final ItemBankUser user = securityUtil.getItemBankUser();

        final ItemCrudRequest request = itemRepository.buildLookupRequest(user, itemId, null);

        request.checkResourceNotFound();

        final GitClient git = itemRepository.cloneRemoteRepository(user, itemId);
        itemRepository.pullBranch(git, request);
        return git.getItemContext();
    }


    /**
     * Clones a stimulus associated with an item.  If there is no stimulus associated with the item then nothing is
     * cloned and null is returned.
     *
     * @param itemContext The context of an item that may be associated with a stimulus.  The item context is expected
     *                    to reference an AssessmentItem.
     * @return The context of the cloned item.
     */
    private ItemContext cloneItemStimulus(final ItemContext itemContext) {
        final ItemBankUser user = securityUtil.getItemBankUser();

        final AssessmentItem item = (AssessmentItem) itemContext.readModelFile();

        final String stimulusId = item.getCore().getStimulusId();

        ItemContext stimulusContext = null;

        if (StringUtils.isNotBlank(stimulusId)) {
            final GitClient git = itemRepository.cloneRemoteRepository(user, stimulusId);
            stimulusContext = git.getItemContext();
        }

        return stimulusContext;
    }

    /**
     * Shells out and runs the Content Package Tabulator in Error-Only mode to produce a validation.json file for the
     * indicated item.
     *
     * @param itemId The ID of the item to be validated
     * @param path   The path to the folder containing the item
     */
    public void runValidation(String itemId, Path path) {
        log.debug("runValidation: CPT validation for {} in path {}", itemId, path);

        final String command = String.format("%s %s", ivsProperties.getCptExecutablePath(), path.toString());

        BufferedReader stdInput = null;
        try {
            final Process process = Runtime.getRuntime().exec(command);
            logValidationOutput(process);
        } catch (SystemException e) {
            throw e;
        } catch (Exception e) {
            throw new SystemException(e);
        } finally {
            IOUtils.closeQuietly(stdInput);
        }
    }

    // ------------------------------------------------------------------------
    // Helper Methods
    // ------------------------------------------------------------------------

    private Path mapClonesToValidationStructure(final ItemContext itemContext, final ItemContext stimulusContext) {
        final Path validationRootPath = localBaseDir.resolve(ID_DIGIT_GENERATOR.generateTransactionId());

        final Path validationRootChild = validationUtility.initializeValidationStructure(validationRootPath);

        validationUtility.mapItemToValidationStructure(itemContext, validationRootChild);

        validationUtility.mapGlossaryToValidationStructure(itemContext, validationRootChild);

        validationUtility.mapStimulusToValidationStructure(stimulusContext, validationRootChild);

        return validationRootChild;
    }

    private void close(GitClient gitClient) {
        if (gitClient != null) {
            gitClient.close();
        }
    }

    private void logValidationOutput(final Process process) {
        final BufferedReader stdInput = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String s;
        try {
            while ((s = stdInput.readLine()) != null) {
                log.debug("CPT: {}", s);
            }
        } catch (IOException e) {
            log.warn("logValidationOutput: Error logging validation output.", e);
        }
    }
}
