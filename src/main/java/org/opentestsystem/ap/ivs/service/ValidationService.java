package org.opentestsystem.ap.ivs.service;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.common.util.ValidationException;
import org.opentestsystem.ap.ivs.config.AmqpConfig;
import org.opentestsystem.ap.ivs.models.GitLabAction;
import org.opentestsystem.ap.ivs.models.GitLabActionDto;
import org.opentestsystem.ap.ivs.models.ValidationError;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileNotFoundException;
import java.nio.file.FileVisitOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Scanner;

/**
 * Created by gregwhite on 8/15/17.
 */
@Slf4j
@Component
public class ValidationService {

    private static String ITEM_ID_REQUIRED = "Item ID is required";

    @Autowired
    public ValidationService(final RabbitTemplate rabbitTemplate,
                             final AmqpConfig amqpConfig,
                             final ItemRepository itemRepository,
                             final SecurityUtil securityUtil,
                             final ItemBankProperties itemBankProperties) {
        this.rabbitTemplate = rabbitTemplate;
        this.amqpConfig = amqpConfig;
        this.itemRepository = itemRepository;
        this.securityUtil = securityUtil;
        this.itemBankProperties = itemBankProperties;
    }

    private final RabbitTemplate rabbitTemplate;
    private final AmqpConfig amqpConfig;
    private final ItemRepository itemRepository;
    private final SecurityUtil securityUtil;
    private final ItemBankProperties itemBankProperties;

    /**
     * Pass item to AMQP client RabbitMq queue for validation
     *
     * @param action The GitLab-derived item information necessary to prepare the item for validation
     */
    public void validate(GitLabAction action) {
        log.debug("validation request enqueued for item {} commit {}", action.getProject().getName(), action.getCheckout_sha());
        rabbitTemplate.convertAndSend(amqpConfig.getIvsProperties().getValidationQueue(), new GitLabActionDto(action));
    }

    public List<ValidationError> getValidationMessages(String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        Item item = itemRepository.findItem(securityUtil.getItemBankUser(), itemId);
        Path path = itemRepository.cloneItem(securityUtil.getItemBankUser(), itemId);
        Optional<File> errorFile;
        try {
             errorFile = Files.walk(path, FileVisitOption.FOLLOW_LINKS)
                    .map(Path::toFile)
                    .filter(x -> x.getName().equals(getErrorFileName(item)))
                    .findFirst();
            return errorFile.isPresent() ? unpackCsv(errorFile.get(), itemId) : new ArrayList<>();
        } catch(Exception ex) {
            throw new RuntimeException("Error searching for validation messages", ex);
        }
    }

    private String getErrorFileName(Item item) {
        String filename = item.getType().equals("stim") ?
                "stim" : "item";
        filename = filename + "-";
        filename = filename + itemBankProperties.getBankKey();
        filename = filename + "-";
        filename = filename + item.getId();
        return filename + "_ErrorReport.csv";
    }

    private List<ValidationError> unpackCsv(File file, String itemId) throws FileNotFoundException {
        List<ValidationError> result = new ArrayList<>();
        Scanner scanner = new Scanner(file);
        scanner.useDelimiter("\n");
        while(scanner.hasNext()) {
            String line = scanner.next();
            String[] fields = line.split(",");
            if(fields.length < 7){
                log.warn("invalid line encountered when parsing validation errors for {} line {}", itemId, line);
                continue;
            }
            ValidationError error = new ValidationError();
            error.category = fields[3];
            error.severity = fields[4];
            error.message = fields[5];
            error.detail = fields[6];
            result.add(error);
        }
        return result;
    }
}
