/*
 * Copyright 2017 Regents of the University of California. Licensed under the Educational Community License, Version
 * 2.0 (the "license"); you may not use this file except in compliance with the License. You may obtain a copy of the
 * license at
 *
 * https://opensource.org/licenses/ECL-2.0
 *
 * Unless required under applicable law or agreed to in writing, software distributed under the License is distributed
 * in an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * specific language governing permissions and limitations under the license.
 */
package org.opentestsystem.ap.ivs.service;

import com.google.common.annotations.VisibleForTesting;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.ivs.config.AmqpConfig;
import org.opentestsystem.ap.ivs.config.IvsProperties;
import org.opentestsystem.ap.ivs.mapper.IvsMapper;
import org.opentestsystem.ap.ivs.models.PushValidation;
import org.opentestsystem.ap.ivs.rest.PushValidationRequest;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.stereotype.Component;

import static org.apache.commons.lang3.StringUtils.containsIgnoreCase;

/**
 * Queues a validation request with the message broker.
 */
@Slf4j
@Component
public class ValidationProducerService {

    private final RabbitTemplate rabbitTemplate;

    private final AmqpConfig amqpConfig;

    private final IvsMapper ivsMapper;

    private final IvsProperties ivsProperties;

    public ValidationProducerService(final RabbitTemplate rabbitTemplate, final AmqpConfig amqpConfig,
                                     final IvsMapper ivsMapper, final IvsProperties ivsProperties) {
        this.rabbitTemplate = rabbitTemplate;
        this.amqpConfig = amqpConfig;
        this.ivsMapper = ivsMapper;
        this.ivsProperties = ivsProperties;
    }

    /**
     * Pass item to AMQP client RabbitMq queue for validation
     *
     * @param request The GitLab-derived item information necessary to prepare the item for validation
     */
    public void submitValidationRequest(PushValidationRequest request) {
        log.debug("Validation request received for item {} and ref {}", request.getProjectName(), request.getRef());
        final PushValidation pushValidation = ivsMapper.mapPushRequest(request);
        if (shouldProcessRequest(pushValidation)) {
            log.debug("Enque request, ref {}, user {}", request.getRef(), request.getUserEmail());
            rabbitTemplate.convertAndSend(amqpConfig.getIvsProperties().getValidationQueue(), pushValidation);
        }
    }

    @VisibleForTesting
    boolean shouldProcessRequest(final PushValidation pushValidation) {
        return !containsIgnoreCase(pushValidation.getCommitMessage(), ivsProperties.getValidationCommitMessage());
    }
}
