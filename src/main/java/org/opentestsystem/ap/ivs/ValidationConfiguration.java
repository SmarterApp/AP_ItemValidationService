package org.opentestsystem.ap.ivs;

import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.config.DatabaseConfiguration;
import org.opentestsystem.ap.common.config.FreemarkerConfig;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.config.JwtWebSecurityConfiguration;
import org.opentestsystem.ap.common.config.ObjectMapperConfiguration;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreSaaifContentGenerator;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemSyncRepository;
import org.opentestsystem.ap.common.itembank.IdGenerator;
import org.opentestsystem.ap.common.model.ItemFactory;
import org.opentestsystem.ap.common.model.JsonModelAssembler;
import org.opentestsystem.ap.common.saaif.SaaifAssembler;
import org.opentestsystem.ap.common.saaif.SaaifMetadataAssembler;
import org.opentestsystem.ap.common.saaif.SaaifWordListAssembler;
import org.opentestsystem.ap.common.saaif.StringAssembler;
import org.opentestsystem.ap.common.saaif.item.AssociatedStimulusSupplier;
import org.opentestsystem.ap.common.saaif.transformer.TransformerFactory;
import org.opentestsystem.ap.common.task.ItemCleanupTask;
import org.opentestsystem.ap.common.task.TaskProperties;
import org.opentestsystem.ap.common.util.ImageGenerator;
import org.opentestsystem.ap.common.util.RandomIdGenerator;
import org.opentestsystem.ap.common.util.WirisImageGenerator;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.Executor;

@Configuration
@Import({
    DatabaseConfiguration.class,
    FreemarkerConfig.class,
    JwtWebSecurityConfiguration.class,
    ObjectMapperConfiguration.class,
    StatusConfiguration.class
})
@EnableConfigurationProperties({ItemBankProperties.class, ValidationProperties.class, TaskProperties.class})
public class ValidationConfiguration {

    private final ItemBankProperties itemBankProperties;

    private final ValidationProperties validationProperties;

    private final RestTemplateBuilder restTemplateBuilder;

    private final freemarker.template.Configuration freemarker;

    private final DataStoreDataManager dataStoreDataManager;

    @Value("${item.validation.async.executor.poolSize:5}")
    private int asyncExecutorPoolSize;

    @Autowired
    public ValidationConfiguration(ItemBankProperties itemBankProperties,
                                   ValidationProperties validationProperties,
                                   RestTemplateBuilder restTemplateBuilder,
                                   freemarker.template.Configuration freemarker,
                                   DataStoreDataManager dataStoreDataManager) {
        this.itemBankProperties = itemBankProperties;
        this.validationProperties = validationProperties;
        this.restTemplateBuilder = restTemplateBuilder;
        this.freemarker = freemarker;
        this.dataStoreDataManager = dataStoreDataManager;
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public IdGenerator itemIdGenerator() {
        return new RandomIdGenerator(itemBankProperties.getIdMinValue(), itemBankProperties.getIdMaxValue());
    }

    @Bean
    @ConditionalOnMissingBean
    public ImageGenerator imageGenerator() {
        return new WirisImageGenerator(itemBankProperties, restTemplateBuilder);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemFactory itemFactory() {
        return new ItemFactory();
    }

    @Bean
    @ConditionalOnMissingBean
    public JsonModelAssembler jsonModelAssembler() {
        return new JsonModelAssembler();
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public StringAssembler stringAssembler() {
        return new StringAssembler(this.freemarker);
    }


    @Bean
    @ConditionalOnMissingBean
    public SaaifAssembler saaifAssembler() {
        return new SaaifAssembler(saaifMetadataAssembler(), saaifWordListAssembler());
    }

    @Bean
    @ConditionalOnMissingBean
    public SaaifMetadataAssembler saaifMetadataAssembler() {
        return new SaaifMetadataAssembler();
    }


    @Bean
    @ConditionalOnMissingBean
    public SaaifWordListAssembler saaifWordListAssembler() {
        return new SaaifWordListAssembler();
    }

    // ------------------------------------------------------------------------


    @Bean
    public ItemCleanupTask itemCleanupTask(TaskProperties taskProperties) {
        return new ItemCleanupTask(taskProperties, this.itemBankProperties);
    }

    @Bean
    public Executor asyncExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(this.asyncExecutorPoolSize);
        executor.setMaxPoolSize(this.asyncExecutorPoolSize);
        executor.setThreadNamePrefix("Validation-");
        return executor;
    }

    @Bean
    @ConditionalOnMissingBean
    public ValidationManager validationManager(ItemEntityRepository itemEntityRepository,
                                               ItemSyncRepository itemSyncRepository) {
        return new ValidationManager(
            itemEntityRepository,
            itemSyncRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public AppAssembler appAssembler() {
        return new AppAssembler(saaifAssembler(), jsonModelAssembler(), stringAssembler());
    }

    @Bean
    @ConditionalOnMissingBean
    public AssociatedStimulusSupplier associatedStimulusSupplier() {
        return new AssociatedStimulusSupplier(this.dataStoreDataManager);
    }

    @Bean
    @ConditionalOnMissingBean
    public TransformerFactory transformerFactory() {
        return new TransformerFactory(associatedStimulusSupplier());
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreSaaifContentGenerator dataStoreSaaifContentGenerator(final ItemBankProperties itemBankProperties,
                                                                         final AppAssembler appAssembler,
                                                                         final DataStoreAttachmentManager dataStoreAttachmentManager,
                                                                         final TransformerFactory transformerFactory,
                                                                         final ImageGenerator imageGenerator) {
        return new DataStoreSaaifContentGenerator(itemBankProperties, appAssembler, dataStoreAttachmentManager, transformerFactory, imageGenerator);
    }
}

