package org.opentestsystem.ap.ivs;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.datastore.entity.ItemSyncEntity;
import org.opentestsystem.ap.common.datastore.preview.DataStorePreviewManager;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemSyncRepository;
import org.opentestsystem.ap.common.model.preview.PreviewData;
import org.opentestsystem.ap.common.model.validation.ValidationResult;
import org.opentestsystem.ap.common.security.model.ItemBankUser;

import java.util.Collections;
import java.util.Objects;

@Slf4j
public class ValidationManager {

    private static final boolean DO_NOT_USE_RANDOM_BANK_KEY = false;

    private final DataStorePreviewManager dataStorePreviewManager;

    private final ItemEntityRepository itemEntityRepository;

    private final ItemSyncRepository itemSyncRepository;

    public ValidationManager(DataStorePreviewManager dataStorePreviewManager,
                             ItemEntityRepository itemEntityRepository,
                             ItemSyncRepository itemSyncRepository) {
        this.dataStorePreviewManager = dataStorePreviewManager;
        this.itemEntityRepository = itemEntityRepository;
        this.itemSyncRepository = itemSyncRepository;
    }

    public PreviewData generatePreviewData(ItemBankUser user, String itemId) {
        log.info("Generate preview data for item {}", itemId);
        PreviewData pd = this.dataStorePreviewManager.generatePreviewData(user, itemId);
        return pd.isStimulus()
            ? pd
            : this.dataStorePreviewManager.generateAssociatedPreviewData(pd, Collections.emptyList());
    }

    public ValidationResult generateSyncResult(String itemId) {
        ValidationResult result = null;
        ItemEntity itemEntity = this.itemEntityRepository.findLastMaster(itemId);
        if (Objects.nonNull(itemEntity)) {
            ItemSyncEntity syncEntity = this.itemSyncRepository.findByItemCommitId(itemEntity.getId());
            if (Objects.isNull(syncEntity)) {
                result = new ValidationResult();
                result.setItemId(itemId);
                result.setItemType(itemEntity.getItemJson().getType());
                result.setMessage("Not current in item bank.");
                result.setCategory("");
                result.setDetail("");
                result.setSeverity("");
            }
        }
        return result;
    }
}
