package org.opentestsystem.ap.ivs.rest.v1;

import io.swagger.annotations.Api;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.ivs.config.IvsProperties;
import org.opentestsystem.ap.ivs.models.GitLabAction;
import org.opentestsystem.ap.ivs.models.ValidationError;
import org.opentestsystem.ap.ivs.service.ValidationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;

/**
 * Validation on IAT items
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/validation")
@Api
public class ValidationApi {

    private final ValidationService validationService;
    private final IvsProperties ivsProperties;

    @Autowired
    public ValidationApi(final ValidationService validationService, final IvsProperties ivsProperties) {
        this.validationService = validationService;
        this.ivsProperties = ivsProperties;
    }

    // ------------------------------------------------------------------------
    // POST requests - Validate Item
    // ------------------------------------------------------------------------

    /**
     * Places item on AMQP queue to be validated
     *
     * @param gitLabAction The GitLab push hook containing item information
     */
    @PostMapping()
    public void beginValidation(@RequestBody GitLabAction gitLabAction, @RequestHeader("X-Gitlab-Token") String token) {
        log.debug("validate item {} for commit {}", gitLabAction.getProject().getName(), gitLabAction.getCheckout_sha());
        if (token.equals(ivsProperties.getGitLabSecret())) {
            validationService.validate(gitLabAction);
        } else {
            log.debug("failed to properly authenticate against gitlab secret with token {}", token);
        }
    }

    @GetMapping("/{itemId}")
    public List<ValidationError> getValidationMessages(@PathVariable final String itemId) {
        List<ValidationError> result = new ArrayList<>();

        ValidationError a = new ValidationError();
        a.category = "Manifest";
        a.severity = "Benign";
        a.message = "Unreferenced wordlist attachment file.";
        a.detail = "wordlistId='127811' filename='item_127811_v3_127811_03bpunjabi_glossary_ogg_m4a.ogg'";
        result.add(a);

        ValidationError b = new ValidationError();
        b.category = "Item";
        b.severity = "Severe";
        b.message = "Duplicate attachment IDs in attachmentlist element.";
        b.detail = "ID: aslfile1";
        result.add(b);

        ValidationError c = new ValidationError();
        c.category = "Metadata";
        c.severity = "Degraded";
        c.message = "Mathematical Practice field not present for MATH subject item.";
        c.detail = "";
        result.add(c);

        ValidationError d = new ValidationError();
        d.category = "Item";
        d.severity = "Tolerable";
        d.message = "Item has improper TTS silencing tag.";
        d.detail = "subject='MATH' claim='1' target='F-3'";
        result.add(d);

        return result;
    }
}
