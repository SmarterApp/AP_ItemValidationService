package org.opentestsystem.ap.ivs.rest.v1;

import io.swagger.annotations.Api;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.ivs.config.GitLabConfig;
import org.opentestsystem.ap.ivs.models.GitLabAction;
import org.opentestsystem.ap.ivs.service.ValidationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Validation on IAT items
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/validation")
@Api
public class ValidationApi {

    private final ValidationService validationService;
    private final GitLabConfig gitLabConfig;

    @Autowired
    public ValidationApi(final ValidationService validationService, final GitLabConfig gitLabConfig) {
        this.validationService = validationService;
        this.gitLabConfig = gitLabConfig;
    }

    // ------------------------------------------------------------------------
    // POST requests - Validate Item
    // ------------------------------------------------------------------------

    /**
     * Places item on AMQP queue to be validated
     *
     * @param gitLabAction The GitLab push hook containing item information
     */
    @PostMapping("")
    public void beginValidation(@RequestBody GitLabAction gitLabAction, @RequestHeader("X-Gitlab-Token") String token) {
        log.debug("validate item {} for commit {}", gitLabAction.project.name, gitLabAction.checkout_sha);
        if(token.equals(gitLabConfig.getSecret())) {
            validationService.validate(gitLabAction);
        } else {
            log.debug("failed to properly authenticate against gitlab secret with token {}", token);
        }
    }

}
