package org.opentestsystem.ap.ivs.rest.v1;

import java.util.List;

import io.swagger.annotations.Api;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.ivs.config.IvsProperties;
import org.opentestsystem.ap.ivs.models.GitLabAction;
import org.opentestsystem.ap.ivs.models.ValidationError;
import org.opentestsystem.ap.ivs.service.ValidationProducerService;
import org.opentestsystem.ap.ivs.service.ValidationConsumerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Validation on IAT items
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/validation")
@Api
public class ValidationApi {

    private final ValidationProducerService validationProducerService;
    private final ValidationConsumerService validationService;
    private final IvsProperties ivsProperties;

    @Autowired
    public ValidationApi(final ValidationProducerService validationProducerService,
                         final ValidationConsumerService validationService,
                         final IvsProperties ivsProperties) {
        this.validationProducerService = validationProducerService;
        this.validationService = validationService;
        this.ivsProperties = ivsProperties;
    }

    // ------------------------------------------------------------------------
    // POST requests - Validate Item
    // ------------------------------------------------------------------------

    /**
     * Places item on AMQP queue to be validated
     *
     * @param gitLabAction The GitLab push hook containing item information
     */
    @PostMapping()
    public void beginValidation(@RequestBody GitLabAction gitLabAction, @RequestHeader("X-Gitlab-Token") String token) {
        log.debug("validate item {} for commit {}", gitLabAction.getProject().getName(), gitLabAction.getCheckout_sha());
        if (token.equals(ivsProperties.getGitLabSecret())) {
            validationProducerService.validate(gitLabAction);
        } else {
            log.debug("failed to properly authenticate against gitlab secret with token {}", token);
        }
    }

    // ------------------------------------------------------------------------
    // GET requests - Validate Item
    // ------------------------------------------------------------------------

    @GetMapping("/{itemId}")
    public List<ValidationError> getValidationMessages(@PathVariable final String itemId) {
        return validationService.getValidationMessages(itemId);
    }
}
