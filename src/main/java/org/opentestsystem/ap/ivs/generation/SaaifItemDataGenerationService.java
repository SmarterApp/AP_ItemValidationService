package org.opentestsystem.ap.ivs.generation;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.DataStoreSaaifContentGenerator;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.security.model.ItemBankUser;
import org.opentestsystem.ap.ivs.model.ValidationGenerationInformation;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;
import java.util.function.Supplier;

@Service
public class SaaifItemDataGenerationService implements ItemDataGenerationService {
    private final DataStoreSaaifContentGenerator dataStoreSaaifContentGenerator;
    private final ItemEntityRepository itemRepository;
    private final ItemBankProperties itemBankProperties;

    private final static String validationFolderName = "validation";

    public SaaifItemDataGenerationService(final DataStoreSaaifContentGenerator dataStoreSaaifContentGenerator,
                                          final ItemEntityRepository itemRepository,
                                          final ItemBankProperties itemBankProperties) {
        this.dataStoreSaaifContentGenerator = dataStoreSaaifContentGenerator;
        this.itemRepository = itemRepository;
        this.itemBankProperties = itemBankProperties;
    }

    @Override
    public ValidationGenerationInformation generateItemData(final ItemBankUser user,
                                                            final String itemId,
                                                            final Path rootPath) {
        ValidationGenerationInformation info = new ValidationGenerationInformation();

        ItemEntity itemEntity = findItemEntity(user, itemId)
            .orElseThrow(() -> new ResourceNotFoundException("Unable to find item " + itemId));

        createBaseDirectories(rootPath, info);

        if (itemEntity.getItemJson().isStimulus()) {
            downloadStimulusData(info, itemEntity);
        } else {
            downloadItemData(user, itemEntity, info);
        }

        cleanUpUnusedDirectories(info);

        return info;
    }

    private void cleanUpUnusedDirectories(ValidationGenerationInformation info) {
        if(cleanupDirectory(info.getItemPath()) && cleanupDirectory(info.getItemBasePath())) {
            info.setItemBasePath(null);
            info.setItemPath(null);
        }

        if(cleanupDirectory(info.getStimulusPath()) && cleanupDirectory(info.getStimBasePath())) {
            info.setStimBasePath(null);
            info.setStimulusPath(null);
        }
    }

    private boolean cleanupDirectory(Path directory) {
        if(directory == null) {
            return true;
        }

        File[] files = directory.toFile().listFiles();
        if(files == null || files.length == 0) {
            try {
                Files.delete(directory);
                return true;
            } catch (IOException e) {
                throw new SystemException("Could not clean up directory " + directory, e);
            }
        }

        return false;
    }

    private void createBaseDirectories(final Path basePath, final ValidationGenerationInformation info) {
        final Path validationFolder = basePath.resolve(validationFolderName);
        final Path itemsBaseDirectory = Paths.get(validationFolder.toString(), "Items");
        final Path stimuliBaseDirectory = Paths.get(validationFolder.toString(), "Stimuli");

        info.setItemBasePath(createDirectory(itemsBaseDirectory));
        info.setStimBasePath(createDirectory(stimuliBaseDirectory));
        info.setValidationPath(validationFolder);
        createManifest(info);

    }

    private void downloadItemData(final ItemBankUser user,
                                  final ItemEntity itemEntity,
                                  final ValidationGenerationInformation info) {

        if (itemEntity.getItemJson().isStimulus()) {
            return;
        }

        final Path itemDirectory = createDirectory(info.getItemBasePath()
            .resolve("item-" + itemBankProperties.getBankKey() + "-" + itemEntity.getItemId()));

        dataStoreSaaifContentGenerator
            .generateSaaifWithAttachments(itemEntity.getItemJson(), itemBankProperties.getBankKey(), itemEntity.getBranchName(), itemDirectory);
        info.setItemPath(itemDirectory);

        Path glossaryRepoPath = itemDirectory.resolve(ModelConstants.AttachmentType.GLOSSARY_ATTACHMENTS);
        if (Files.exists(glossaryRepoPath) && containsGlossaryData(itemEntity.getItemJson())) {
            mapGlossaryToValidationStructure(itemEntity.getItemId(), info.getItemBasePath(), glossaryRepoPath);
        }

        if (itemEntity.getItemJson() instanceof AssessmentItem) {
            AssessmentItem assessmentItem = (AssessmentItem) itemEntity.getItemJson();
            downloadAssociatedStimulus(user, assessmentItem, info);
        }
    }

    private void downloadAssociatedStimulus(final ItemBankUser user,
                                            final AssessmentItem assessmentItem,
                                            final ValidationGenerationInformation info) {
        final String stimulusId = assessmentItem.getCore().getStimulusId();

        if (StringUtils.isBlank(stimulusId)) {
            return;
        }

        final ItemEntity stimulusEntity = findItemEntity(user, stimulusId)
            .orElseThrow(
                (Supplier<RuntimeException>) () -> new ResourceNotFoundException(
                    "Could not find stimulus id " + stimulusId));

        downloadStimulusData(info, stimulusEntity);
    }

    private void downloadStimulusData(final ValidationGenerationInformation info,
                                      final ItemEntity stimulusEntity) {

        final Path stimDirectory = info.getStimBasePath()
            .resolve("stim" + "-" + itemBankProperties.getBankKey() + "-" + stimulusEntity.getItemId());
        createDirectory(stimDirectory);

        dataStoreSaaifContentGenerator
            .generateSaaifWithAttachments(stimulusEntity.getItemJson(), itemBankProperties.getBankKey(), stimulusEntity.getBranchName(), stimDirectory);

        info.setStimulusPath(stimDirectory);
        info.setContainsStimulus(true);

        Path glossaryRepoPath = stimDirectory.resolve(ModelConstants.AttachmentType.GLOSSARY_ATTACHMENTS);
        if (Files.exists(glossaryRepoPath) && containsGlossaryData(stimulusEntity.getItemJson())) {
            mapGlossaryToValidationStructure(stimulusEntity.getItemId(), info.getItemBasePath(), glossaryRepoPath);
        }
    }

    private boolean containsGlossaryData(final Item item) {
        return item.getGlossary().getTerms() != null && !item.getGlossary().getTerms().isEmpty();
    }

    private Optional<ItemEntity> findItemEntity(final ItemBankUser user, final String itemId) {
        ItemEntity entity = itemRepository.findCurrentUserBranchEdit(itemId, user.getUserName(), user.getUserName());

        if (entity == null) {
            entity = itemRepository.findLastMaster(itemId);
        }

        return Optional.ofNullable(entity);
    }

    private void mapGlossaryToValidationStructure(final String itemId,
                                                  final Path itemsBaseDirectory,
                                                  final Path glossaryRepoPath) {
        Path glossaryValidationRepoPath = null;


        String glossaryLegacyId = RepositoryUtil.getGlossaryId(itemId);

        // it is expected the glossary repo is a sibling with the item repo
        if (Files.exists(glossaryRepoPath)) {
            glossaryValidationRepoPath = itemsBaseDirectory
                .resolve("item-" + itemBankProperties.getBankKey() + "-" + glossaryLegacyId);

            try {
                // copy the glossary folder to the validation folder structure
                FileUtils.copyDirectory(glossaryRepoPath.toFile(), glossaryValidationRepoPath.toFile());
            } catch (IOException e) {
                throw new SystemException(
                    "Error mapping glossary " + glossaryLegacyId + " to the validation structure",
                    e);
            }
        }
    }

    private Path createDirectory(final Path directory) {
        try {
            return Files.createDirectories(directory);
        } catch (IOException e) {
            throw new SystemException(
                "Error creating validation file structure: " + directory,
                e);
        }
    }

    private void createManifest(ValidationGenerationInformation info) {
        try {
            FileUtils.write(info.getValidationPath().resolve("imsmanifest.xml").toFile(), "<manifest/>", "UTF-8");
        } catch (IOException e) {
            throw new SystemException(e);
        }
    }
}
