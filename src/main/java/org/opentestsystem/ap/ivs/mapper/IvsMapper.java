/*
 * Copyright 2017 Regents of the University of California. Licensed under the Educational Community License, Version
 * 2.0 (the "license"); you may not use this file except in compliance with the License. You may obtain a copy of the
 * license at
 *
 * https://opensource.org/licenses/ECL-2.0
 *
 * Unless required under applicable law or agreed to in writing, software distributed under the License is distributed
 * in an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * specific language governing permissions and limitations under the license.
 */
package org.opentestsystem.ap.ivs.mapper;

import java.util.List;

import com.google.common.annotations.VisibleForTesting;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.ivs.models.PushValidation;
import org.opentestsystem.ap.ivs.rest.PushValidationRequest;
import org.springframework.stereotype.Component;

import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;
import static org.apache.commons.lang3.StringUtils.lastIndexOf;
import static org.apache.commons.lang3.StringUtils.substring;

@Slf4j
@Component
public class IvsMapper {

    private static final char FORWARD_SLASH = '/';

    public PushValidation mapPushRequest(final PushValidationRequest request) {
        final PushValidation pushValidation = new PushValidation();
        if (request != null) {
            pushValidation.setRef(request.getRef());
            pushValidation.setBranchName(parseBranchName(request.getRef()));
            pushValidation.setItemId(request.getProjectName());
            pushValidation.setUserName(request.getUserName());
            pushValidation.setUserEmail(request.getUserEmail());

            final PushValidationRequest.Commit commit = parsePushCommit(request);
            if (commit != null) {
                pushValidation.setCommitId(commit.getId());
                pushValidation.setCommitMessage(commit.getMessage());
            }
        }
        return pushValidation;
    }

    @VisibleForTesting
    PushValidationRequest.Commit parsePushCommit(final PushValidationRequest request) {
        final List<PushValidationRequest.Commit> commits = request.getCommits();
        PushValidationRequest.Commit commit = null;
        if (isNotEmpty(commits)) {
            if (commits.size() > 1) {
                log.warn("parsing validation event with more than 1 commit for item {}", request.getProjectName());
            }
            // expected to be 1 commit per push
            commit = commits.get(0);
        }
        return commit;
    }

    @VisibleForTesting
    String parseBranchName(final String ref) {
        return substring(ref, lastIndexOf(ref, FORWARD_SLASH) + 1);
    }
}
