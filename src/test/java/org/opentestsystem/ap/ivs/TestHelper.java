package org.opentestsystem.ap.ivs;

import freemarker.template.Configuration;
import freemarker.template.TemplateExceptionHandler;
import lombok.Getter;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.assembler.StringAssembler;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.itembank.IdGenerator;
import org.opentestsystem.ap.common.saaif.JsonModelAssembler;
import org.opentestsystem.ap.common.saaif.SaaifAssembler;
import org.opentestsystem.ap.common.saaif.SaaifMetadataAssembler;
import org.opentestsystem.ap.common.saaif.SaaifWordListAssembler;
import org.opentestsystem.ap.common.saaif.ValidationResultAssembler;
import org.opentestsystem.ap.common.util.RandomIdGenerator;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import static java.lang.System.getenv;

@Getter
public class TestHelper {

    public static final String BANK_KEY = "200";

    public static final String ITEM_ID = "200044";

    public static final String LEGACY_ITEM_ID = String.format("item-%s-%s", BANK_KEY, ITEM_ID);

    public static final String STIM_ID = "200045";

    public static final String LEGACY_STIM_ID = String.format("stim-%s-%s", BANK_KEY, STIM_ID);

    public static final String ITEM_ZIP_FILE = "item-200044.zip";

    public static final String STIM_ZIP_FILE = "stim-200045.zip";

    public static final String EXECUTE_TABULATOR_COMMAND = "dotnet /Users/bdrainer/smarter_app/cpt/TabulateContentPackage_3-2-0-2_Portable/TabulateSmarterTestContentPackage.dll -v-trd";

    public static final int ID_MIN_VALUE = 1000000;

    public static final int ID_MAX_VALUE = Integer.MAX_VALUE;

    public static final IdGenerator ID_DIGIT_GENERATOR = new RandomIdGenerator(ID_MIN_VALUE, ID_MAX_VALUE);

    private ItemBankProperties itemBankProperties = new ItemBankProperties();

    private IvsProperties ivsProperties = new IvsProperties();

    private AppAssembler assembler;

    private SaaifAssembler saaifAssembler;

    private SaaifMetadataAssembler metadataAssembler;

    private SaaifWordListAssembler wordListAssembler;

    private JsonModelAssembler jsonModelAssembler;

    private ValidationResultAssembler validationResultAssembler;

    private StringAssembler stringAssembler;

    private Configuration freemarker;

    private Path localBaseDir = Paths.get(getenv("HOME") + "/ItemBankValidationTest");

    private String gitlabHost = "https://gitlab-dev.smarterbalanced.org";

    private String gitlabUser = "test@fake.com";

    private String gitlabPass = "testPassword";

    private String gitlabGroup = "TestItembankGroup";

    static {
        System.setProperty("javax.xml.bind.context.factory", "org.eclipse.persistence.jaxb.JAXBContextFactory");
    }

    public TestHelper() {
        itemBankProperties.setBankKey(BANK_KEY);
        itemBankProperties.setGroup(gitlabGroup);
        itemBankProperties.setHost(gitlabHost);
        itemBankProperties.setIdMinValue(ID_MIN_VALUE);
        itemBankProperties.setIdMaxValue(ID_MIN_VALUE);
        itemBankProperties.setUser(gitlabUser);
        itemBankProperties.setPassword(gitlabUser);
        itemBankProperties.setLocalBaseDir(localBaseDir.toString());

        ivsProperties.setCptExecutablePath(EXECUTE_TABULATOR_COMMAND);

        freemarker = new Configuration(Configuration.VERSION_2_3_25);
        freemarker.setClassForTemplateLoading(this.getClass(), "/saaif_templates");
        freemarker.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        freemarker.setDefaultEncoding("UTF-8");

        metadataAssembler = new SaaifMetadataAssembler();
        metadataAssembler.init();

        wordListAssembler = new SaaifWordListAssembler();
        wordListAssembler.init();

        saaifAssembler = new SaaifAssembler(metadataAssembler, wordListAssembler);
        saaifAssembler.init();

        jsonModelAssembler = new JsonModelAssembler();

        validationResultAssembler = new ValidationResultAssembler();

        stringAssembler = new StringAssembler(freemarker);

        assembler = new AppAssembler(saaifAssembler, jsonModelAssembler, validationResultAssembler, stringAssembler);
    }

    public void unzipFile(final File zipFile, final Path unzipDestination) throws IOException {
        ZipInputStream zis = null;

        makeDirectory(unzipDestination);

        try {
            zis = new ZipInputStream(new FileInputStream(zipFile));

            ZipEntry zipEntry = zis.getNextEntry();

            while (zipEntry != null) {
                final File file = unzipDestination.resolve(zipEntry.getName()).toFile();

                if (!zipEntry.isDirectory()) {
                    try (final BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file))) {
                        int len;
                        byte[] buffer = new byte[1024];
                        while ((len = zis.read(buffer)) > 0) {
                            bos.write(buffer, 0, len);
                        }
                    }
                } else {
                    file.mkdirs();
                }

                zipEntry = zis.getNextEntry();
            }
        } finally {
            if (zis != null) {
                zis.closeEntry();
                zis.close();
            }
        }
    }

    private void makeDirectory(final Path path) {
        final File file = path.toFile();
        if (!file.exists()) {
            file.mkdirs();
        }
    }

}
