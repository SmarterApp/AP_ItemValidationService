/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ivs;

import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.client.S3BucketManager;
import org.opentestsystem.ap.common.datastore.client.S3VersionedBucketManager;
import org.opentestsystem.ap.common.datastore.preview.DataStorePreviewManager;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemHistoryRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemSyncRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusTransitionRepository;
import org.opentestsystem.ap.common.restclient.HistoryClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import static org.mockito.Mockito.mock;

/**
 * No ItemBank configuration means we are running under a context where
 * we do not have what is need to connect to an actual Gitlab instance.
 * This configuration replaces the runtime configuration
 */
@Configuration
@ConditionalOnProperty(value = "itembank.test.enabled", havingValue = "true")
public class AppTestConfig {

    public final ItemBankProperties itemBankProperties;

    @Autowired
    public AppTestConfig(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    @Bean
    public S3BucketManager s3BucketManager() {
        return mock(S3BucketManager.class);
    }

    @Bean
    public S3VersionedBucketManager s3VersionedBucketManager() {
        return mock(S3VersionedBucketManager.class);
    }

    @Bean
    public DataStoreUtility dataStoreUtility() {
        return mock(DataStoreUtility.class);
    }

    @Bean
    public DataStoreAttachmentManager dataStoreAttachmentManager() {
        return mock(DataStoreAttachmentManager.class);
    }

    @Bean
    public DataStoreDataManager dataStoreDataManager() {
        return mock(DataStoreDataManager.class);
    }

    @Bean
    public DataStorePreviewManager dataStorePreviewManager() {
        return mock(DataStorePreviewManager.class);
    }

    @Bean
    public ValidationManager validationManager() {
        return mock(ValidationManager.class);
    }

    @Bean
    public ItemEntityRepository itemEntityRepository() {
        return mock(ItemEntityRepository.class);
    }

    @Bean
    public WorkflowStatusRepository workflowStatusRepository() {
        return mock(WorkflowStatusRepository.class);
    }

    @Bean
    public WorkflowStatusTransitionRepository workflowStatusTransitionRepository() {
        return mock(WorkflowStatusTransitionRepository.class);
    }

    @Bean
    public ItemSyncRepository itemSyncRepository() {
        return mock(ItemSyncRepository.class);
    }

    @Bean
    public ItemHistoryRepository itemHistoryRepository() {
        return mock(ItemHistoryRepository.class);
    }

    @Bean
    public HistoryClient historyClient() {
        return mock(HistoryClient.class);
    }
}
